{"version":3,"sources":["Make_In_India.png","components/Home.js","components/Search.js","components/AddProduct.js","components/FAQ.js","components/About.js","components/Navigation.js","components/App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Home","React","Component","Search","AddProduct","FAQ","About","Navigation","pages","pageLink","displayName","view","render","location","Navbar","map","page","index","key","exact","path","match","to","Fragment","className","App","alt","src","logo","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FAAAA,EAAOC,QAAU,IAA0B,2C,sOCQ5BC,E,uKAJX,OAAO,yD,GAFQC,IAAMC,WCMVC,E,uKAJX,OAAO,2D,GAFUF,IAAMC,WCMZE,E,uKAJX,OAAO,+D,GAFcH,IAAMC,WCMhBG,E,uKAJX,OAAO,wD,GAFOJ,IAAMC,WCMTI,E,uKAJX,OAAO,0D,GAFSL,IAAMC,WCYX,SAASK,IACtB,IAAMC,EAAQ,CACZ,CAAEC,SAAU,IAAKC,YAAa,OAAQC,KAAMX,GAC5C,CAAES,SAAU,UAAWC,YAAa,SAAUC,KAAMR,GACpD,CAAEM,SAAU,OAAQC,YAAa,cAAeC,KAAMP,GACtD,CAAEK,SAAU,OAAQC,YAAa,MAAOC,KAAMN,GAC9C,CAAEI,SAAU,SAAUC,YAAa,QAASC,KAAML,IAEpD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOM,OAAQ,cAAGC,SAAH,OAAkB,kBAACC,EAAD,CAAQN,MAAOA,OAChD,kBAAC,IAAD,KACGA,EAAMO,KAAI,SAACC,EAAMC,GAAP,OACT,kBAAC,IAAD,CACEC,IAAKD,EACLE,OAAK,EACLC,KAAMJ,EAAKP,SACXG,OAAQ,cAAGS,MAAH,OAAe,kBAACL,EAAKL,KAAN,YAG3B,kBAAC,IAAD,CAAUW,GAAG,QAMrB,SAASR,EAAT,GAA4B,IAAVN,EAAS,EAATA,MAChB,OACE,kBAAC,IAAMe,SAAP,KACGf,EAAMO,KAAI,SAACC,EAAMC,GAAP,OACT,kBAAC,IAAD,CAASO,UAAU,WAAWN,IAAKD,EAAOE,OAAK,EAACG,GAAIN,EAAKP,UACtDO,EAAKN,iBC9BDe,MAVf,WACE,OACE,yBAAKD,UAAU,OACb,yBAAKE,IAAI,OAAOC,IAAKC,MACrB,mDACA,kBAACrB,EAAD,QCEcsB,QACW,cAA7BC,OAAOjB,SAASkB,UAEe,UAA7BD,OAAOjB,SAASkB,UAEhBD,OAAOjB,SAASkB,SAASV,MACvB,2DCXNW,IAASpB,OACP,kBAAC,IAAMqB,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cd841de2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Make_In_India.41d9f969.png\";","import React from \"react\";\n\nclass Home extends React.Component {\n  render() {\n    return <div>Home Code Goes Here.</div>;\n  }\n}\n\nexport default Home;\n","import React from \"react\";\n\nclass Search extends React.Component {\n  render() {\n    return <div>Search Code Goes Here.</div>;\n  }\n}\n\nexport default Search;\n","import React from \"react\";\n\nclass AddProduct extends React.Component {\n  render() {\n    return <div>AddProduct Code Goes Here.</div>;\n  }\n}\n\nexport default AddProduct;\n","import React from \"react\";\n\nclass FAQ extends React.Component {\n  render() {\n    return <div>FAQ Code Goes Here.</div>;\n  }\n}\n\nexport default FAQ;\n","import React from \"react\";\n\nclass About extends React.Component {\n  render() {\n    return <div>About Code Goes Here.</div>;\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport {\n  NavLink,\n  Switch,\n  Route,\n  BrowserRouter as Router,\n  Redirect,\n} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Search from \"./Search\";\nimport AddProduct from \"./AddProduct\";\nimport FAQ from \"./FAQ\";\nimport About from \"./About\";\n\nexport default function Navigation() {\n  const pages = [\n    { pageLink: \"/\", displayName: \"Home\", view: Home },\n    { pageLink: \"/search\", displayName: \"Search\", view: Search },\n    { pageLink: \"/add\", displayName: \"Add Product\", view: AddProduct },\n    { pageLink: \"/faq\", displayName: \"FAQ\", view: FAQ },\n    { pageLink: \"/about\", displayName: \"About\", view: About },\n  ];\n  return (\n    <Router>\n      <Route render={({ location }) => <Navbar pages={pages} />} />\n      <Switch>\n        {pages.map((page, index) => (\n          <Route\n            key={index}\n            exact\n            path={page.pageLink}\n            render={({ match }) => <page.view />}\n          />\n        ))}\n        <Redirect to=\"/\" />\n      </Switch>\n    </Router>\n  );\n}\n\nfunction Navbar({ pages }) {\n  return (\n    <React.Fragment>\n      {pages.map((page, index) => (\n        <NavLink className=\"nav-link\" key={index} exact to={page.pageLink}>\n          {page.displayName}\n        </NavLink>\n      ))}\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport logo from \"../../Make_In_India.png\";\nimport \"./App.css\";\nimport Navigation from \"../Navigation\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img alt=\"logo\" src={logo} />\n      <h1>Aatm Nirbhar Bharat</h1>\n      <Navigation />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/index\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}